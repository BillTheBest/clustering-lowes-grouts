h1. Cut Through the Clutter: Use Clustering to Suggest Facets

I have a concrete counter top in our kitchen that is rather different from most concrete counter tops because it is coloured with a thin surface layer of multiple shades of concrete dye all mixed together.  It has a wonderful earthy look to it, but I've discovered that it doesn't stand up very well to my wife swinging around heavy pots and pans!  
!https://img.skitch.com/20120302-e87fxwe4pmfmp8xg3ta824qcgn.png!

I tried a sanded grout with the brand name "Mapei" from Lowes Home Improvement, but it didn't really have the effect I wanted, leaving a very textured patch that doesn't take the concrete sealer that makes the counter look shiny.   
!https://img.skitch.com/20120302-q6skbnuqbf8snfg1anwuctwd82.png!

So I went onto Lowes's website and searched for "Mapei Unsanded Grout":http://www.lowes.com/SearchCatalogDisplay?storeId=10151&langId=-1&catalogId=10051&N=0&newSearch=true&Ntt=mapei+unsanded+grouts, and received back 30 results:

!http://img.skitch.com/20120210-jabq1nkpd6c682ijm32sq5s86b.png!

While on the face of it, 30 results for my query sounds like a great thing, when I scrolled down the page I was overwhelmed by all the choices!  It seemed like I had 30 different choices to pick from.  Go ahead, "click the link to search Lowes.com":http://www.lowes.com/SearchCatalogDisplay?storeId=10151&langId=-1&catalogId=10051&N=0&newSearch=true&Ntt=mapei+unsanded+grouts and try it yourself!  

I scrolled up and down a couple of times and started realizing that I didn't have 30 choices.  I actually had TWO choices: a "Unsanded Powder Grout" and a "Premium Unsanded Powder Grout", and they come in a variety of colors and sizes.  So here I am, frantically scrolling up and down trying to build a mental model of all my choices, when I think "ah, facets should help me narrow down my choices".  I knew I was doing just a bit of patching of the countertop, so I wanted the smallest amount of grout possible. And I knew I wanted a rich earthy red/brown color to match the existing concrete counter top.  Unfortunately "Size" is not a facet option offered by Lowes.

So I thought, instead of trying to build a mental model of all thirty results in my head, why don't I leverage clustering to see if I can pull out of the unstructured data some shared clusters that could act as facets?   This blog post and the "accompanying code":https://github.com/o19s/clustering-lowes-grouts are going to walk you through the steps I took.  All the links assume you have Solr running on your localhost.

h3. 1) Extracting the Data

I wrote a very simple Ruby script that queries Lowes.com for "mapei unsanded grout", and parses out the results and stores them in a Solr index.  Fire up Solr by running <code>./start.sh</code>.  Then run the script <code>ruby download_lowes_data.rb</code>.  Warning, you may have to install some gems!

h3. 2) View the Clusters

I leveraged the Solr built in UI "Solritas":http://wiki.apache.org/solr/Solritas to expose the data about the clusters.  Browse to "http://localhost:8983/solr/browse":http://localhost:8983/solr/browse to see the results of clustering the data:

!http://img.skitch.com/20120210-bc5571kxdbhmrn37xsmqepaeib.png!

It's not very exciting at this point.  I've told Solr to cluster primarily on the title, and secondarily on the product detail bullets.  And it has accurately identified that there are a number of grouts that come in the 10 lb. bag.  And that we have some premium grouts.  More useful clustering would be to seperate out those that are 10 lb., and those that are 25 lb.  Although, one thing to note is that by clustering, we did successfully extract the root product title for two of the items, and dropped the color name portion.  The products titled _MAPEI 10 lb. Keracolor U Premium Unsanded Grout - Lt.Almond #49_ and _MAPEI 10 lb. Keracolor U Premium Unsanded Grout - Chocolate #07_ both have the correct root title of _Keracolor U Premium Unsanded Grout_ in the clustering list.


h3. 3) Adding in Facets

I had turned on faceting on for the Item Number and Model Number fields, and set the minimum facet count to display to 2 because I only care about item numbers or model numbers that are shared by multiple products.  While each product does have a unique Model Number, what was interesting to discover was that there are 14 out of the 30 products share the same Item Number: 185276.  It appears that Item Number is assigned by the manufacturer, not Lowes, and identifies a single product, regardless of size or color choice, while Model Number is the unique SKU for that product.

!http://img.skitch.com/20120210-x8nd43gtmu6h5tkppfb4q72xc9.png!

I clicked "the Item # 185276 facet":http://localhost:8983/solr/browse?&q=mapei+unsanded+grout&fq=item_number_s:%22Item+%23%3A+185276%22 and my clusters started looking much more interesting:

!https://img.skitch.com/20120302-nq69pr7uqppe4886cumgiwsagb.png!

I now have 5 clusters identified: _Unsanded Powdered Grout_, _Keracolor U Premimum Unsanded Grout_, _MAPEI 10 Lbs_, _MAPEI 25 Lbs_, and _Help Contribute to LEED Certification of Projects_.   The first four clusters all look really useful as discriminators, as I can see that I have a set of products that are 10 lb., 25 lb., and either the Unsanded Powder Grout or the Premium Unsanded Grout.   Even the fifth facet about LEED certification could be useful in helping me identify products that contribute towards LEED certification.  One thing I noticed though was that the total unique number of clustered items didn't match the number of products returned by the faceted query.  Turns out the clustering results are returned via an AJAX call to the <code>/clustering</code> handler, and it has a limit of 10 rows.  So I bumped it up to 100 so that the results of clustering would be over all the documents returned, not just the top 10.  Here is the configuration from <code>solrconfig.xml</code>:
	
<pre>
<code>
<requestHandler name="/clustering" startup="lazy" enable="${solr.clustering.enabled:false}" class="solr.SearchHandler">
	<lst name="defaults">
		<bool name="clustering">true</bool>
		<str name="clustering.engine">default</str>
		<bool name="clustering.results">true</bool>
		<str name="carrot.title">title_t</str>
		<str name="carrot.url">id</str>
		<str name="carrot.snippet">product_bullets_txt</str>
		<bool name="carrot.produceSummary">true</bool>
		<bool name="carrot.outputSubClusters">false</bool>
		<str name="defType">edismax</str>
		<str name="qf">text^0.5 product_bullets_txt^1.0 title_t^1.2 model_number_s^1.5 item_number_s^1.5 id^10.0</str>
		<str name="q.alt">*:*</str>
		<str name="rows">100</str>
		<str name="fl">*,score</str>
	</lst>
	<arr name="last-components">
		<str>clustering</str>
	</arr>
</requestHandler>
	
</code>
</pre>


h3. 4) Playing with Clustering Options

The <code>/clustering</code> request handler makes it easy to play with the various clustering options.  The clustering output is below the <code><result name="response"/></code> search results XML stanza, so scroll down!  The basic faceted query that we've been doing is:

"http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22":http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22

The primary source of data is the title, followed by the product bullets.  If we disable the carrot parameter for summarizing the product bullets <code>carrot.produceSummary=false</code>, we get more clusters:

"http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&carrot.produceSummary=false":http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&carrot.produceSummary=false 

including clusters for _Brick Paver_ and _Glass and Clay Tiles_.   It's great that there are more clusters, but you can see they become less interesting unless you are specifically looking for those things.

Another way of filtering down the volume of suggested clusters is to only cluster on the title field by blanking out the snippets field by setting <code>carrot.snippet=</code> to be blank:

"http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&carrot.snippet=":http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&carrot.snippet= (notice the <code>carrot.snippet=</code> param to blank out snippets) removes the clusters based on the product bullets like _Help Contribute to LEED Certification of Projects_.

Another way of changing what clusters are returned is to not filter what you cluster on by any specific item number.  When you do a basic cluster on the full data set you get some great clusters on color:

"http://localhost:8983/solr/clustering?&q=*:*":http://localhost:8983/solr/clustering?&q=*:*

Lastly, you can play with different clustering engines, Solr comes with three of them, "Lingo (the default), STC, and Kmeans":http://wiki.apache.org/solr/ClusteringComponent#carrot.algorithm option.  Try both the full dataset and the faceted on item number dataset to see the different types of results from the clustering algorithms.

STC seems to be very similar to Lingo, but does provide some clusters that have multiple labels.  For example _MAPEI 10 Lb_ and _Premium Unsanded Grout_, as well as a separate cluster of just _MAPEI 10 lbs_ products.
"http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&clustering.engine=stc":http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&clustering.engine=stc
"http://localhost:8983/solr/clustering?&q=*:*&clustering.engine=stc":http://localhost:8983/solr/clustering?&q=*:*&clustering.engine=stc

KMeans returns clusters that are all over the place.  Lots of labels, but I don't quite see the connection between the items that makes them all clustered.  We have some clusters that are _Tan_, _Chocolate_, _Cocoa_, and three items associated with it, each one of the colors!
"http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&clustering.engine=kmeans":http://localhost:8983/solr/clustering?&q=*:*&fq=item_number_s:%22Item+%23%3A+185276%22&clustering.engine=kmeans
"http://localhost:8983/solr/clustering?&q=*:*&clustering.engine=kmeans":http://localhost:8983/solr/clustering?&q=*:*&clustering.engine=kmeans

KMeans on this dataset seems to be the least useful.


h2. What does it mean?

Well, first and foremost, it means that clustering can be a discovery tool for figuring out potential tags and facets for your documents.  By facets, I mean potential ways of slicing through all the data.  By tags, I mean a set of richer attributes about the products that is pulled out of the product descriptions.

In this specific case, it really drove home that instead of 30 products with different sizes, colors, and types, that there are two products from a users perspective: _MAPEI Unsanded Powdered Grout_ and _MAPEI Keracolor U Unsanded Grout_.   These two products should have a set of drop downs for size and color.  The simple bit of clustering we did suggested that size was something that could be extracted as potential tags.   

There are two ways to model these relationships.  You could model the products in Solr either as two documents, one per product, and use dynamic fields to create multivalued fields for size and color.  Or, if you need to index everything de-normalized the way Lowes has done it, then if you have identified some tags as distinct fields, then you can use field collapsing so that even though you may have 14 products all with the same name, but different sizes and colors you collapse on the item number, and then provide those data as distinguishing drop downs.  

Here is a sense of what field collapsing on item number will do, we have 17 documents.   16 are unique item numbers, plus the 17th is the collapsed version of the 14 products that all share item number 185276.

"http://localhost:8983/solr/browse?&q=*%3A*&wt=xml&group=true&group.field=item_number_s&group.main=true&rows=30":http://localhost:8983/solr/browse?&q=*%3A*&wt=xml&group=true&group.field=item_number_s&group.main=true&rows=30


Oh, and just so you don't think this is an easy problem to solve, Amazon, who normally is a wonderful example of search done right, has the same exact problem for "Aqua Mix Grout Colorant":http://www.amazon.com/s/ref=sr_nr_scat_228926_ln?rh=n%3A228926%2Ck%3Agrout&keywords=grout&ie=UTF8&qid=1328909477&scn=228926&h=9d45480749457aa3cdff82998beda07f3a6316b7#/ref=nb_sb_noss?url=node%3D228926&field-keywords=aqua+mix+grout+colorant&rh=n%3A228013%2Cn%3A%21468240%2Cn%3A511228%2Cn%3A13397651%2Cn%3A228926%2Ck%3Aaqua+mix+grout+colorant
 
h2. Next Steps
 
 So after all that, my colleage Dan suggested that I needed an example of showing the payout of going through the effort of clustering.  So I added a script that pulls back the clusters and stores them in a multi valued field <code>tags_txt</code>.  <code>tags_txt</code> can now be treated as traditional facetsin the user interface. The two choices that seemed most interesting are clustering on all the products and just the products that share the Item Number 185276.  
 
Go ahead and run <code>ruby insert_clustered_data.rb</code>  <code>tags_smv</code> is a multivalued string field that is perfect for faceting on, and should now have all the cluster labels stored.   Reload the "browse interface":http://localhost:8983/solr/browse?&q= and you will now have a list of very reasonable facets to use derived by clustering:

!https://img.skitch.com/20120316-kqp2d6q7ejh5xgmkj1fiy3prfg.png!

Because in <code>solrconfig.xml</code> the <code>facet.mincount=2</code>, any completely unique clusters are hidden from the list of facetable options, which reduces the amount of noise in the <code>tags_smv</code> list.
 
 
 
 
 _Like this blog post?  More at "www.opensourceconnections.com/blog":http://www.opensourceconnections.com/blog_






 
